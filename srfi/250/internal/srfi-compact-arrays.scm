(define (make-compact-array size)
  (cond ((< size #xFF) (make-bytevector size #xFF))
        ((< size #xFFFF) (make-u16vector size #xFFFF))
        ((< size #xFFFFFFFF) (make-u32vector size #xFFFFFFFF))
        (else (make-u64vector size #xFFFFFFFFFFFFFFFF))))

(define (compact-array-ref sa idx)
  (define (max-to n) (lambda (x) (if (eqv? x n) #f x)))
  (cond ((and (bytevector? sa) (bytevector-u8-ref sa idx))
         => (max-to #xFF))
        ((and (u16vector? sa) (u16vector-ref sa idx))
         => (max-to #xFFFF))
        ((and (u32vector? sa) (u32vector-ref sa idx))
         => (max-to #xFFFFFFFF))
        ((and (u64vector? sa) (u64vector-ref sa idx))
         => (max-to #xFFFFFFFFFFFFFFFF))))

(define (compact-array-set? sa idx)
  (not (not (compact-array-ref sa idx))))

(define (compact-array-set! sa idx val)
  (cond ((bytevector? sa) (bytevector-u8-set! sa idx val))
        ((u16vector? sa)  (u16vector-set! sa idx val))
        ((u32vector? sa)  (u32vector-set! sa idx val))
        ((u64vector? sa)  (u64vector-set! sa idx val))))

(define (compact-array-delete! sa idx)
  (cond ((bytevector? sa)
         (bytevector-u8-set! sa idx #xFF))
        ((u16vector? sa)
         (u16vector-set! sa idx #xFFFF))
        ((u32vector? sa)
         (u32vector-set! sa idx #xFFFFFFFF))
        ((u64vector? sa)
         (u64vector-set! sa idx #xFFFFFFFFFFFFFFFF))))

(define (compact-array-clear! sa)
  (define len (compact-array-length sa))
  (cond ((bytevector? sa)
         (let loop ((idx 0))
           (when (< idx len)
             (bytevector-u8-set! sa idx #xFF)
             (loop (+ idx 1)))))
        ((u16vector? sa)
         (let loop ((idx 0))
           (when (< idx len)
             (u16vector-set! sa idx #xFFFF)
             (loop (+ idx 1)))))
        ((u32vector? sa)
         (let loop ((idx 0))
           (when (< idx len)
             (u32vector-set! sa idx #xFFFFFFFF)
             (loop (+ idx 1)))))
        ((u64vector? sa)
         (let loop ((idx 0))
           (when (< idx len)
             (u64vector-set! sa idx #xFFFFFFFFFFFFFFFF)
             (loop (+ idx 1)))))))

(define (compact-array-copy sa)
  (define len (compact-array-length sa))
  (cond ((bytevector? sa) (bytevector-copy sa))
        ((u16vector? sa)
         (let ((out (make-u16vector len)))
           (let loop ((idx 0))
             (when (< idx len)
               (u16vector-set! out idx (u16vector-ref sa idx))))))
        ((u32vector? sa)
         (let ((out (make-u32vector len)))
           (let loop ((idx 0))
             (when (< idx len)
               (u32vector-set! out idx (u32vector-ref sa idx))))))
        ((u64vector? sa)
         (let ((out (make-u64vector len)))
           (let loop ((idx 0))
             (when (< idx len)
               (u64vector-set! out idx (u64vector-ref sa idx))))))))

(define (compact-array-length sa)
  (cond ((bytevector? sa)
         (bytevector-length sa))
        ((u16vector? sa)
         (u16vector-length sa))
        ((u32vector? sa)
         (u32vector-length sa))
        ((u64vector? sa)
         (u64vector-length sa))))
