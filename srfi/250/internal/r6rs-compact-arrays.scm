(define (make-compact-array size)
  (cond ((< size #xFF)
         (let ((bv (make-bytevector (+ size 1) #xFF)))
           (bytevector-u8-set! bv 0 1)
           bv))
        ((< size #xFFFF)
         (let ((bv (make-bytevector (* 2 (+ size 1)) #xFF)))
           (bytevector-u8-set! bv 0 2)
           bv))
        ((< size #xFFFFFFFF)
         (let ((bv (make-bytevector (* 4 (+ size 1)) #xFF)))
           (bytevector-u8-set! bv 0 4)
           bv))
        (else
         (let ((bv (make-bytevector (* 8 (+ size 1)) #xFF)))
           (bytevector-u8-set! bv 0 8)
           bv))))

(define (compact-array-ref sa idx)
  (define (max-to x n) (if (= x n) #f x))
  (assert (bytevector? sa))
  (case (bytevector-u8-ref sa 0)
    ((1) (max-to (bytevector-u8-ref sa (+ idx 1)) #xFF))
    ((2) (max-to (bytevector-u16-native-ref sa (* (+ idx 1) 2)) #xFFFF))
    ((4) (max-to (bytevector-u32-native-ref sa (* (+ idx 1) 4)) #xFFFFFFFF))
    ((8) (max-to (bytevector-u64-native-ref sa (* (+ idx 1) 8)) #xFFFFFFFFFFFFFFFF))
    (else (assertion-violation 'compact-array-ref "not a compact array" sa))))

(define (compact-array-set? sa idx)
  (not (not (compact-array-ref sa idx))))

(define (compact-array-set! sa idx val)
  (define (check-size n)
    (if (>= val n) (assertion-violation 'compact-array-set! "can't store value in compact array, try upgrading it")))
  (assert (bytevector? sa))
  (case (bytevector-u8-ref sa 0)
    ((1) (check-size #xFF) (bytevector-u8-set! sa (+ idx 1) val))
    ((2) (check-size #xFFFF) (bytevector-u16-native-set! sa (* (+ idx 1) 2) val))
    ((4) (check-size #xFFFFFFFF) (bytevector-u32-native-set! sa (* (+ idx 1) 4) val))
    ((8) (check-size #xFFFFFFFFFFFFFFFF) (bytevector-u64-native-set! sa (* (+ idx 1) 8) val))
    (else (assertion-violation 'compact-array-set! "not a compact array" sa))))

(define (compact-array-delete! sa idx)
  (assert (bytevector? sa))
  (case (bytevector-u8-ref sa 0)
    ((1) (bytevector-u8-set! sa (+ idx 1) #xFF))
    ((2) (bytevector-u16-native-set! sa (* (+ idx 1) 2) #xFFFF))
    ((4) (bytevector-u32-native-set! sa (* (+ idx 1) 4) #xFFFFFFFF))
    ((8) (bytevector-u64-native-set! sa (* (+ idx 1) 8) #xFFFFFFFFFFFFFFFF))
    (else (assertion-violation 'compact-array-delete! "not a compact array" sa))))

(define (compact-array-clear! sa)
  (assert (bytevector? sa))
  (let ((size (bytevector-u8-ref sa 0)))
    (bytevector-fill! sa #xFF)
    (bytevector-u8-set! sa 0 size)))

(define (compact-array-copy sa) (bytevector-copy sa))

(define (compact-array-length sa)
  (assert (bytevector? sa))
  (- (div (bytevector-length sa) (bytevector-u8-ref sa 0)) 1))
